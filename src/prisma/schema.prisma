generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  manager
  staff
}

enum Gender {
  male
  female
}

enum PaymentMethod {
  cash
  online
}

enum MembershipStatus {
  active
  expired
}

model Company {
  id        Int      @id @default(autoincrement())
  clientCode String
  branchID     Int // Removed @default(autoincrement()) to allow manual assignment as per your scenario
  name      String

  users     User[]
  members   Member[]
  Membership Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clientCode, branchID])
}

model User {
  id        Int      @id @default(autoincrement())
  mobileNo  String   
  password  String
  name      String?
  role      Role     @default(admin)
  isActive  Boolean  @default(true)
  TT        Boolean  @default(false)

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int


  membersCreated   Member[]
  paymentsReceived Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Membership Membership[]
}

model Member {
  id        Int      @id @default(autoincrement())
  name      String
  mobileNo  String?
  gender    Gender? 
  address   String?
  city      String?
  pincode   String? 
  email     String? 
  aadhar    String? 

  isActive  Boolean  @default(true)
  TT        Boolean  @default(false)

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  createdById Int
  createdBy   User    @relation(fields: [createdById], references: [id])

  payments    Payment[]
  memberships Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Membership {
  id                       Int         @id @default(autoincrement())
  memberId                 Int
  member                   Member      @relation(fields: [memberId], references: [id])
  companyId                Int
  company                  Company     @relation(fields: [companyId], references: [id])
  createdById              Int
  createdBy                User        @relation(fields: [createdById], references: [id])

  // Membership Plan Details 
  durationMonths           Int
  totalPlanAmount          Decimal     @db.Decimal(10, 2)
  discountAmount           Decimal     @db.Decimal(10, 2) @default(0.00)
  finalPayableAmount       Decimal     @db.Decimal(10, 2) 
  startDate                DateTime
  endDate                  DateTime 

  // Financial Tracking (Aggregate for THIS specific membership)
  amountPaidByMember       Decimal     @db.Decimal(10, 2) @default(0.00) // Sum of payments towards THIS membership
  balanceRemaining         Decimal     @db.Decimal(10, 2) // finalPayableAmount - amountPaidByMember

  
  status                   MembershipStatus      @default(active) 
  remark                   String?

  payments                 Payment[] 

  createdAt                DateTime    @default(now())
  updatedAt                DateTime @updatedAt
}

model Payment {
  id                         Int         @id @default(autoincrement())
  amountReceived             Decimal     @db.Decimal(10, 2) // Amount of this specific transaction
  paymentDate                DateTime    @default(now())
  paymentMethod              PaymentMethod @default(cash)

  // Link to the specific Membership this payment is for
  membershipId               Int
  membership                 Membership? @relation(fields: [membershipId], references: [id]) 

  // Link to the Member who made the payment (still useful for direct member queries)
  memberId                   Int 
  member                     Member?     @relation(fields: [memberId], references: [id]) 

  receivedByUserId           Int?
  receivedBy                 User?       @relation(fields: [receivedByUserId], references: [id])

  notes                      String?

  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
}